training_subset$Class
train_subset$Class
Fit <- train(Class ~ ., data=train_subset, method="rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
head(segmentationOriginal)
library(caret)
train_subset <-subset(segmentationOriginal, Case=="Train")
test_subset <-subset(segmentationOriginal, Case=="Test")
train_subset$Class
set.seed(125)
names(train_subset)
Fit <- train(Class ~ ., data=train_subset, method="rpart")
Fit <- train(Class ~ ., method="rpart", data=train_subset)
library(caret)
train_subset <-subset(segmentationOriginal, Case=="Train")
subset$Case
test_subset <-subset(segmentationOriginal, Case=="Test")
train_subset$Class
set.seed(125)
names(train_subset)
Fit <- train(Class ~ ., method="rpart", data=train_subset)
modFit <- train(Class ~ .,method="rpart",data=train_subset)
install.packages("rpart")
library(rpart)
library("rpart")
install.packages("rpart")
library("rpart")
library(caret)
train_subset <-subset(segmentationOriginal, Case=="Train")
subset$Case
test_subset <-subset(segmentationOriginal, Case=="Test")
train_subset$Class
set.seed(125)
names(train_subset)
Fit <- train(Class ~ ., method="rpart", data=train_subset)
modFit <- train(Class ~ .,method="rpart",data=train_subset)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
head(segmentationOriginal)
library(caret)
train_subset <-subset(segmentationOriginal, Case=="Train")
test_subset <-subset(segmentationOriginal, Case=="Test")
train_subset$Class
set.seed(125)
names(train_subset)
Fit <- train(Class ~ ., method="rpart", data=train_subset)
print(Fit$finalModel)
predict(Fit,TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
predict(Fit,TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
Fit <- train(Area ~ ., method="rpart", data=olive)
print(Fit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict.list <- predict(tree3, newdata, type="class")
predict.list <- predict(Fit, newdata)
predict.list
newdata
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit <- train(chd ~ ., method="glm", family="binomial", data= train)
fit <- train(chd ~ ., data= train, method="glm", family="binomial")
fit <- train(chd ~ ., data= trainSA, method="glm", family="binomial")
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, data= trainSA, method="glm", family="binomial")
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, data= trainSA, method="glm")
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, data= trainSA, method="glm")
trainSA
fit <- lm(chd ~ age+alcohol+obesity+typea+ldl, data= trainSA, method="glm", family="binomial")
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, data= trainSA, method="glm", family="binomial")
print(fit$finalModel)
print(fit)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
print(fit)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
missClass(trainSA$chd, predict(fit, trainSA))
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, trainSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, trainSA))
set.seed(1234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, trainSA))
set.seed(1234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, trainSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA
testSA = SAheart[-train,]
set.seed(1234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, trainSA))
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
set.seed(1234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
set.seed(13234)
fit <- train(chd ~ age+alcohol+obesity+typea+ldl, method="glm", family="binomial", data= trainSA)
summary(fit)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., method="rf", data=vowel.train)
res <- predict(fit,vowel.test)
varImp(fit)
fit <- randomForest(y ~ ., data=vowel.train)
res <- predict(fit,vowel.test)
varImp(fit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit <- randomForest(y ~ ., data=vowel.train)
res <- predict(fit,vowel.test)
varImp(fit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit <- train(y ~ ., data=vowel.train)
res <- predict(fit,vowel.test)
varImp(fit)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
res <- predict(fit,vowel.test)
varImp(fit)
swirl()
library(swirl)
swirl()
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
ls
ls()
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
install.packages("RGtk2", type="source")
> install.packages("cairoDevice", type="source")
install.packages("RGtk2")
install.packages("cairoDevice")
install.packages("RGtk2", type="source")
install.packages("cairoDevice", type="source")
Sys.setenv(PATH=paste0("/opt/pkgconfig/bin:",Sys.getenv("PATH")))
Sys.setenv(PKG_CONFIG_PATH="/opt/local/lib/pkgconfig")
install.packages("RGtk2", type="source")
install.packages("cairoDevice", type="source")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
trainingUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training_set <- read.csv(url(trainingUrl), na.strings=c("NA","#DIV/0!",""))
training_set <- read.csv(url(trainingUrl), na.strings=c("NA","#DIV/0!",""))
test_set <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
dim(training_set); dim(test_set)
library(lattice); library(ggplot2)
library(caret); library(rpart); library(rpart.plot);
library(randomForest); library(knitr)
library(rattle)
install.packages("rattle")
Sys.setenv(PATH=paste0("/opt/pkgconfig/bin:",Sys.getenv("PATH")))
Sys.setenv(PKG_CONFIG_PATH="/opt/local/lib/pkgconfig")
install.packages("RGtk2", type="source")
install.packages("RGtk2")
Sys.setenv(PATH=paste0("/opt/pkgconfig/bin:",Sys.getenv("PATH")))
Sys.setenv(PKG_CONFIG_PATH="/opt/local/lib/pkgconfig")
install.packages("RGtk2", type="source")
install.packages("cairoDevice", type="source")
install.packages("rattle")
install.packages("rattle")
install.packages("RGtk2")
install.packages("Cairo")
install.packages("rattle")
rattle()
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
rattle()
knitr::opts_chunk$set(echo = TRUE)
predict_rf <- predict(fit_rf, validation_subset)
fit_rf <- train(classe ~ ., data = training_subset, method = "rf", trControl = control)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
knitr::opts_chunk$set(echo = FALSE)
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
knitr::opts_chunk$set(echo = TRUE)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617, 39.2970681, 39.2824806),
lng = c(-76.5929798, -76.6206598, -76.5469683, -76.6150537, -76.6016766))
library(leaflet)
library(leaflet)
library(leaflet)
getwd()
setwd("/Users/ayutapadhi/datasciencecoursera/data_product")
install.packages("leaflet")
library(leaflet)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617, 39.2970681, 39.2824806),
lng = c(-76.5929798, -76.6206598, -76.5469683, -76.6150537, -76.6016766))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
library(dplyr)
A=c(rep(c('a','b'),4), "a")
B=c(rep(c('c','d'),each=4), "d")
df=data.frame(A,B)
df
count(df,vars = c('A','B'))
unique(df,vars = c(A,B))
distinct(select(df, c(A,B)))
freq_A<-count((select(df, A)))
freq_A
freq_B<-count((select(df, B)))
freq_B
distinct(select(df, c(A,B)))
unique(select(df, c(A,B)))
mutate(df, C = rep(1:4), length(unique(B)))
df
mutate(df, C = rep(1:4), length(unique(B)))
mutate(df, C = seq_along(freq_B)))
mutate(df, C = seq_along(freq_B))
mutate(df, C = seq_along(unique(freq_B)))
mutate(df, C = seq(unique(freq_B)))
df %>% group_by(B) %>% mutate(id = 1:n())
library(dplyr)
df
df %>% group_by(B) %>% mutate(id = 1:n())
library(pryr)
install.packages("pryr")
library(pryr)
ftype(mean)
ftype(lm)
ftype(dGamma)
ftype(dgamma)
install.packages("DDPQuiz3")
install.packages(plotly)
install.packages(Plotly)
install.packages(ggplotly)
install.packages("plotly")
install.packages("ggplotly")
d <- data(diamonds)
d <- data(diamond)
d <- data(diamonds)
library(datasets)
d <- data(diamonds)
d <- data(diamond)
d <- data(diamonds)
data(diamonds)
head(diamonds)
data(diamonds)
summary(diamonds)
library(ggplot2)
data(diamonds)
head(diamonds)
plot(carat ~ price, data=diamonds)
knitr::opts_chunk$set(echo = FALSE)
plot(carat ~ price, data=d)
plot(carat ~ price, data=d)
19 * 100
head(color())
head(colors())
library(RColorBrewer)
?RColorBrewer
brewer.pal(n, name)
display.brewer.pal(n, name)
display.brewer.pal(8, dark2)
display.brewer.pal(8, Dark2)
display.brewer.pal(8, "Dark2")
?RColorBrewer
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,
colorblindFriendly=FALSE)
?RColorBrewer
display.brewer.pal(7,"BrBG")
?RColorBrewer
brewer.pal.info["Blues",]
display.brewer.pal(7,"Accent")
display.brewer.pal(12,"Accent")
?RColorBrewer
shiny::runApp('project/MyShinyApp')
runApp('project/MyShinyApp')
data(WWWusage)
WWWusage
precip
longley
Formaldehyde
airquality
diamonds
min(diamonds$carat)
max(diamonds$carat)
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
d
d <- diamonds[sample(nrow(diamonds), 1000), ]
d
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
max(diamonds$price)
min(diamonds$price)
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp()
runApp()
runApp()
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
plot(d$carat, d$price, xlab = "Diamond Carats",
ylab = "Price")
plot(d$carat, d$price, xlab = "Diamond Carats",
ylab = "Price", bty = "n", pch = 16,
xlim = c(.1, 5), ylim = c(250, 20000))
model2lines <- predict(model2, newdata = data.frame(
carat = crtInput,
cut='Very Good',
color='G',clarity='VS2'))
lines(.1:5, model2lines, col = "blue", lwd = 2)
model2 <- lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat + cut +  color + clarity, data = d)
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
model2lines <- predict(model2, newdata = data.frame(
carat = crtInput,
cut='Very Good',
color='G',clarity='VS2'))
model2lines <- predict(model2, newdata = data.frame(
carat = .35,
cut='Very Good',
color='G',clarity='VS2'))
model2pred()
runApp('project/air_quality/AirQualityPrediction')
mtcars
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/MyShinyApp')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/MyShinyApp')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
model2 <- lm(formula = I(log10(price)) ~ I(carat^(1/3)) + carat + cut +  color + clarity, data = d)
summary(model2)
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
runApp('project/air_quality/AirQualityPrediction')
head(diamonds)
runApp('project/air_quality/AirQualityPrediction')
setwd("/Users/ayutapadhi/datasciencecoursera/data_product/project/diamonds/diamondprice")
runApp()
runApp()
runApp()
runApp()
subset(diamonds, color == "input$color"I" && carat >= 1.5)
subset(diamonds, color == "I" && carat >= 1.5)
d<- subset(diamonds, color == "I" && carat >= 1.5)
d
d<- subset(diamonds, color == "I" && carat > 1.5)
d
d<- subset(diamonds, color == "I" )
d
d<- subset(diamonds, color == "I" & carat > .29 )
d
d<- subset(diamonds, color == "I" & carat >= .29 )
d
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/ayutapadhi/datasciencecoursera/data_product_project/diamondprice")
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='padhi',
token='948EABF63DF9630D74BC2184A003DC33',
secret='/p61enSY46WBxuXL/7emm5VQHM7JcF3I9Ut/MvVN')
library(rsconnect)
rsconnect::deployApp('/Users/ayutapadhi/datasciencecoursera/data_product_project/diamondprice')
setwd("/Users/ayutapadhi/datasciencecoursera/data_product_project/diamondprice/Presentation")
list.files()
# Chunk 1
library(ggplot2)
head(diamonds,5)
